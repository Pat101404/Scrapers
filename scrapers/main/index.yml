# Coomer.su API Scraper for Stash
# Version: 1.1
#
# How to use:
# 1. Save this file as 'coomer-su.yml' in your Stash scraper directory.
# 2. In Stash, go to Settings -> Scrapers and click the "Reload" icon to refresh.
# 3. This scraper should now appear in your list of scrapers.
#
# How it works:
# It uses the file path to extract the creator's username and the post ID.
# For a path like: /Lust/hunnypaint/post_1086626166/videos/...
# - It extracts 'hunnypaint' as the user.
# - It extracts '1086626166' as the post ID.
# It then uses these to call the coomer.su API and retrieve the metadata.
#
# Configuration:
# You can change the 'service' if you are scraping from a different coomer.su
# section (e.g., 'fansly').
# Go to Scrapers -> Coomer.su -> Edit -> Configuration -> Set 'service' value.
# Default is 'onlyfans'.

name: "Coomer.su by Filepath"
description: "Scrapes metadata from coomer.su using the username and post ID from the file path."
url: https://coomer.su/
version: "1.1"

configuration:
  - id: service
    name: Service
    description: "The service on coomer.su (e.g., 'onlyfans', 'fansly')"
    type: string
    default: "onlyfans"

# Scraper for individual scenes (videos)
sceneByPath:
  - path:
      # This regex is designed to match paths like:
      # /any/path/Lust/<user>/post_<post_id>/videos/<filename>
      # It captures the 'user' and 'post_id' from the path.
      # If your directory structure is different, you may need to adjust this regex.
      regex: 'Lust/(?P<user>[^/]+)/post_(?P<post_id>\d+)/'
    url:
      # Constructs the API URL using the captured user and post_id
      string: "https://coomer.su/api/v1/${service}/user/${user}/post/${post_id}"
    parse:
      # Extracts data from the JSON response using JSONPath
      title:
        selector: "$.title"
      details:
        selector: "$.content"
      date:
        selector: "$.published"
        # The date from the API is in 'YYYY-MM-DD HH:MM:SS' format, which Stash handles correctly.
      studio:
        # Uses the captured username as the Studio
        selector: "'${user}'"
        # The API also returns the username at $.user, but using the path capture is more direct.
      performers:
        # Uses the captured username as the Performer
        - selector: "'${user}'"
          # You can also use the API response: selector: "$.user"

# Scraper for individual images
imageByPath:
  - path:
      # This regex is designed to match paths like:
      # /any/path/Lust/<user>/post_<post_id>/images/<filename>
      # It captures the 'user' and 'post_id' from the path.
      regex: 'Lust/(?P<user>[^/]+)/post_(?P<post_id>\d+)/'
    url:
      # Constructs the API URL using the captured user and post_id
      string: "https://coomer.su/api/v1/${service}/user/${user}/post/${post_id}"
    parse:
      # Extracts data from the JSON response using JSONPath
      title:
        selector: "$.title"
      details:
        selector: "$.content"
      date:
        selector: "$.published"
      studio:
        # Uses the captured username as the Studio
        selector: "'${user}'"
      performers:
        # Uses the captured username as the Performer
        - selector: "'${user}'"